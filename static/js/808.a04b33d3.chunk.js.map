{"version":3,"file":"static/js/808.a04b33d3.chunk.js","mappings":"qSAIMA,EAAyBC,EAAAA,YAAiB,SAAAC,EAO7CC,GAAQ,IANTC,EAAQF,EAARE,SAAQC,EAAAH,EACRI,MAAAA,OAAK,IAAAD,GAAQA,EAAAE,EAAAL,EAEbM,GAAIC,OAAS,IAAAF,EAAG,MAAKA,EACrBG,EAASR,EAATQ,UACGC,GAAKC,EAAAA,EAAAA,GAAAV,EAAAW,GAEFC,GAASC,EAAAA,EAAAA,IAAmBX,EAAU,aACtCY,EAA0B,kBAAVV,EAAqB,IAAHW,OAAOX,GAAU,SACzD,OAAoBY,EAAAA,EAAAA,KAAKT,GAASU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAChChB,IAAKA,GACFQ,GAAK,IACRD,UAAWU,IAAWV,EAAWJ,EAAQ,GAAHW,OAAMH,GAAMG,OAAGD,GAAWF,KAEpE,IACAd,EAAUqB,YAAc,YACxB,Q,oBC6BA,EAxCiB,WACb,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAeC,EAAAA,IACvBC,GAAYF,EAAAA,EAAAA,IAAeG,EAAAA,IAC3BC,GAAWJ,EAAAA,EAAAA,IAAeK,EAAAA,IAIhCC,EAAAA,EAAAA,YAAU,WACNT,EAASU,EAAAA,GAAAA,UACb,GAAG,CAACV,IAEJ,IAAMW,GAAaC,EAAAA,EAAAA,cAAY,WAC3BC,OAAOC,SAASC,QACpB,GAAG,IAIH,OAAIV,GACOT,EAAAA,EAAAA,KAACoB,EAAAA,EAAU,IAGlBT,GAEIU,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAvB,EAAAA,EAAAA,KAAA,KAAAuB,SAAG,sLACHvB,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACC,QAAQ,UAAUC,QAASX,EAAWQ,SAAC,0GAMnDvB,EAAAA,EAAAA,KAAClB,EAAS,CAAAyC,UACNvB,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAACrB,MAAOA,KAK7B,C","sources":["../node_modules/react-bootstrap/esm/Container.js","pages/MainPage/ui/MainPage.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Container = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  fluid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'container');\n  const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid ? `${prefix}${suffix}` : prefix)\n  });\n});\nContainer.displayName = 'Container';\nexport default Container;","import { useCallback, useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../shared/store\";\nimport { hasErrorSelector, isLoadingSelector, postsActions, postsSelector } from \"../../../shared/store/posts\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport Container from 'react-bootstrap/Container';\nimport PostList from \"../../../entities/Posts/PostsList/PostList\";\nimport { PageLoader } from \"../../../widgets/PageLoader/ui/PageLoader\";\nimport './MainPage.css'\n\n\nconst MainPage = () => {\n    const dispatch = useAppDispatch()\n    const posts = useAppSelector(postsSelector)\n    const isLoading = useAppSelector(isLoadingSelector)\n    const hasError = useAppSelector(hasErrorSelector)\n    \n\n\n    useEffect(() => {\n        dispatch(postsActions.request())\n    }, [dispatch])\n\n    const reloadPage = useCallback(() => {\n        window.location.reload();\n    }, []); \n\n\n\n    if (isLoading) {\n        return <PageLoader/>\n    }\n\n    if (hasError) {\n        return (\n            <>\n            <p>Произошла непредвиденная ошибка</p>\n            <Button variant=\"warning\" onClick={reloadPage}>Обновить страницу</Button>\n            </>\n        );\n      }\n\n      return (\n        <Container>\n            <PostList posts={posts}/>\n        </Container>\n    );\n\n\n};\n\nexport default MainPage;\n"],"names":["Container","React","_ref","ref","bsPrefix","_ref$fluid","fluid","_ref$as","as","Component","className","props","_objectWithoutProperties","_excluded","prefix","useBootstrapPrefix","suffix","concat","_jsx","_objectSpread","classNames","displayName","dispatch","useAppDispatch","posts","useAppSelector","postsSelector","isLoading","isLoadingSelector","hasError","hasErrorSelector","useEffect","postsActions","reloadPage","useCallback","window","location","reload","PageLoader","_jsxs","_Fragment","children","Button","variant","onClick","PostList"],"sourceRoot":""}